)
microwave_oven_factory <- R6Class("MicrowaveOven",
private = list(
..power_rating_watts = 800,
..power_level_watts = 800,
..door_is_open = FALSE
),
public = list(
cook = function(time_seconds) {
Sys.sleep(time_seconds)
print("Your food is cooked!")
},
open_door = function() {
private$..door_is_open = TRUE
},
close_door = function() {
private$..door_is_open = FALSE
}
),
active = list(
power_rating_watts = function() {
private$..power_rating_watts
},
power_level_watts = function(value) {
if (missing(value)) {
private$..power_level_watts
} else {
assert_is_a_number(value)
assert_all_are_in_closed_range(
value, 0, private$..power_rating_watts
)
private$..power_level_watts <- value
}
}
)
)
fancy_microwave_oven_factory <- R6Class(
"FancyMicrowaveOven",
inherit = microwave_oven_factory,
public = list(
cook_baked_potato = function() {
self$cook(3)
},
cook = function(time_seconds) {
super$cook(time_seconds)
message("Enjoy your dinner!")
}
),
active = list(
super_ = function() super
)
)
ascii_pizza_slice <- "   __\\n // \\\"\\\"--.._\\n||  (_)  _ \\\"-._\\n||    _ (_)    '-.\\n||   (_)   __..-'\\n \\\\\\\\__..--\\\"\\\"\""
# Explore other microwaves
microwave_oven_factory
fancy_microwave_oven_factory
# Define a high-end microwave oven class
high_end_microwave_oven_factory <- R6Class(
"HighEndMicrowaveOven",
inherit = fancy_microwave_oven_factory,
public = list(
cook = function(time_seconds) {
super$super_$cook(time_seconds)
message(ascii_pizza_slice)
}
)
)
# Instantiate a high-end microwave oven
a_high_end_microwave <- high_end_microwave_oven_factory$new()
# Use it to cook for one second
a_high_end_microwave$cook(1)
ascii_pizza_slice <- "   __
\n // \"\"--.._
\n||  (_)  _ \"-._
\n||    _ (_)    '-.
\n||   (_)   __..-'
\n \\\\__..--\"\""
# Explore other microwaves
microwave_oven_factory
fancy_microwave_oven_factory
# Define a high-end microwave oven class
high_end_microwave_oven_factory <- R6Class(
"HighEndMicrowaveOven",
inherit = fancy_microwave_oven_factory,
public = list(
cook = function(time_seconds) {
super$super_$cook(time_seconds)
message(ascii_pizza_slice)
}
)
)
# Instantiate a high-end microwave oven
a_high_end_microwave <- high_end_microwave_oven_factory$new()
# Use it to cook for one second
a_high_end_microwave$cook(1)
# Define a new environment
env <- new.env()
# Add an element named perfect
env$perfect <- c(6, 28, 496)
# Add an element named bases
env[["bases"]] <- c("A", "C", "G", "T")
# Assign lst and env
lst <- list(
perfect = c(6, 28, 496),
bases = c("A", "C", "G", "T")
)
env <- list2env(lst)
# Copy lst
lst2 <- lst
# Change lst's bases element
lst$bases[4] = "U"
# Test lst and lst2 identical
identical(lst$bases, lst2$bases)
# Copy env
env2 <- env
# Change env's bases element
env$bases[4] = "U"
# Test env and env2 identical
identical(env$bases, env2$bases)
# Complete the class definition
microwave_oven_factory <- R6Class(
"MicrowaveOven",
private = list(
shared = {
# Create a new environment named e
e <- new.env()
# Assign safety_warning into e
e$safety_warning <- c("Warning. Do not try to cook metal objects")
# Return e
e
}
),
active = list(
# Add the safety_warning binding
safety_warning = function (value){
if(missing(value)){
private$shared$safety_warning
} else{
private$shared$safety_warning <- value
}
}
)
)
# Create two microwave ovens
a_microwave_oven <- microwave_oven_factory$new()
another_microwave_oven <- microwave_oven_factory$new()
# Change the safety warning for a_microwave_oven
a_microwave_oven$safety_warning <- c("Warning. If the food is too hot you may scald yourself.")
# Verify that the warning has change for another_microwave
another_microwave_oven$safety_warning
library(pryr)
library(R6)
library(assertive.types)
library(assertive.numbers)
# Complete the class definition
microwave_oven_factory <- R6Class(
"MicrowaveOven",
private = list(
shared = {
# Create a new environment named e
e <- new.env()
# Assign safety_warning into e
e$safety_warning <- c("Warning. Do not try to cook metal objects")
# Return e
e
}
),
active = list(
# Add the safety_warning binding
safety_warning = function(value){
if(missing(value)) {
private$shared$safety_warning
} else{
private$shared$safety_warning <- value
}
}
)
)
# Create two microwave ovens
a_microwave_oven <- microwave_oven_factory$new()
another_microwave_oven <- microwave_oven_factory$new()
# Change the safety warning for a_microwave_oven
a_microwave_oven$safety_warning <- c("Warning. If the food is too hot you may scald yourself.")
# Verify that the warning has change for another_microwave
another_microwave_oven$safety_warning
# Create a microwave oven
a_microwave_oven <- microwave_oven_factory$new()
# Copy a_microwave_oven using <-
assigned_microwave_oven <- a_microwave_oven
# Copy a_microwave_oven using clone()
cloned_microwave_oven <- a_microwave_oven$clone()
# Change a_microwave_oven's power level
a_microwave_oven$power_level_watts <- 400
# Check a_microwave_oven & assigned_microwave_oven same
identical(a_microwave_oven$power_level_watts, assigned_microwave_oven$power_level_watts)
# Check a_microwave_oven & cloned_microwave_oven different
!identical(a_microwave_oven$power_level_watts, cloned_microwave_oven$power_level_watts)
# Create a microwave oven
a_microwave_oven <- microwave_oven_factory$new()
# Look at its power plug
a_microwave_oven$power_plug
# Copy a_microwave_oven using clone(), no args
cloned_microwave_oven <- a_microwave_oven$clone()
# Copy a_microwave_oven using clone(), deep = TRUE
deep_cloned_microwave_oven <- a_microwave_oven$clone(deep = TRUE)
# Change a_microwave_oven's power plug type
a_microwave_oven$power_plug$type <- c("British")
# Check a_microwave_oven & cloned_microwave_oven same
identical(a_microwave_oven$power_plug$type, cloned_microwave_oven$power_plug$type)
# Check a_microwave_oven & deep_cloned_microwave_oven different
!identical(a_microwave_oven$power_plug$type, deep_cloned_microwave_oven$power_plug$type)
# Create a microwave oven
a_microwave_oven <- microwave_oven_factory$new()
# Copy a_microwave_oven using <-
assigned_microwave_oven <- a_microwave_oven
# Copy a_microwave_oven using clone()
cloned_microwave_oven <- a_microwave_oven$clone()
# Change a_microwave_oven's power level
a_microwave_oven$power_level_watts <- 400
# Check a_microwave_oven & assigned_microwave_oven same
identical(a_microwave_oven$power_level_watts, assigned_microwave_oven$power_level_watts)
# Check a_microwave_oven & cloned_microwave_oven different
!identical(a_microwave_oven$power_level_watts, cloned_microwave_oven$power_level_watts)
#--------------------------------------> Attack of the Clones (2)
# Create a microwave oven
a_microwave_oven <- microwave_oven_factory$new()
# Look at its power plug
a_microwave_oven$power_plug
# Copy a_microwave_oven using clone(), no args
cloned_microwave_oven <- a_microwave_oven$clone()
# Copy a_microwave_oven using clone(), deep = TRUE
deep_cloned_microwave_oven <- a_microwave_oven$clone(deep = TRUE)
# Change a_microwave_oven's power plug type
a_microwave_oven$power_plug$type <- c("British")
# Check a_microwave_oven & cloned_microwave_oven same
identical(a_microwave_oven$power_plug$type, cloned_microwave_oven$power_plug$type)
# Check a_microwave_oven & deep_cloned_microwave_oven different
!identical(a_microwave_oven$power_plug$type, deep_cloned_microwave_oven$power_plug$type)
power_plug_factory <- R6Class(
"PowerPlug",
private = list(
..type = "American"
),
active = list(
type = function(value) {
if (missing(value)) {
private$..type
} else {
value <- match.arg(
value,
c("American", "Australasian", "British", "European")
)
private$..type <- value
}
},
voltage_volts = function() {
if (private$..type == "American") 110 else 230
},
frequency_hertz = function() {
if (private$..type == "American") 60 else 50
}
)
)
a_microwave_oven <- microwave_oven_factory$new()
# Look at its power plug
a_microwave_oven$power_plug
# Copy a_microwave_oven using clone(), no args
cloned_microwave_oven <- a_microwave_oven$clone()
# Copy a_microwave_oven using clone(), deep = TRUE
deep_cloned_microwave_oven <- a_microwave_oven$clone(deep = TRUE)
# Change a_microwave_oven's power plug type
a_microwave_oven$power_plug$type <- c("British")
# Check a_microwave_oven & cloned_microwave_oven same
identical(a_microwave_oven$power_plug$type, cloned_microwave_oven$power_plug$type)
# Check a_microwave_oven & deep_cloned_microwave_oven different
!identical(a_microwave_oven$power_plug$type, deep_cloned_microwave_oven$power_plug$type)
# Create a microwave oven
a_microwave_oven <- microwave_oven_factory$new()
# Look at its power plug
a_microwave_oven$power_plug
# Copy a_microwave_oven using clone(), no args
cloned_microwave_oven <- a_microwave_oven$clone()
# Copy a_microwave_oven using clone(), deep = TRUE
deep_cloned_microwave_oven <- a_microwave_oven$clone(deep = TRUE)
# Change a_microwave_oven's power plug type
a_microwave_oven$power_plug$type <- c("British")
# Check a_microwave_oven & cloned_microwave_oven same
identical(a_microwave_oven$power_plug$type, cloned_microwave_oven$power_plug$type)
# Check a_microwave_oven & deep_cloned_microwave_oven different
identical(a_microwave_oven$power_plug$type, deep_cloned_microwave_oven$power_plug$type)
microwave_oven_factory <- R6Class("MicrowaveOven",
private = list(
..power_rating_watts = 800,
..power_level_watts = 800,
..door_is_open = FALSE
),
public = list(
cook = function(time_seconds) {
Sys.sleep(time_seconds)
print("Your food is cooked!")
},
open_door = function() {
private$..door_is_open = TRUE
},
close_door = function() {
private$..door_is_open = FALSE
}
),
active = list(
power_rating_watts = function() {
private$..power_rating_watts
},
power_level_watts = function(value) {
if (missing(value)) {
private$..power_level_watts
} else {
assert_is_a_number(value)
assert_all_are_in_closed_range(
value, 0, private$..power_rating_watts
)
private$..power_level_watts <- value
}
}
)
)
# Create a microwave oven
a_microwave_oven <- microwave_oven_factory$new()
# Look at its power plug
a_microwave_oven$power_plug
# Copy a_microwave_oven using clone(), no args
cloned_microwave_oven <- a_microwave_oven$clone()
# Copy a_microwave_oven using clone(), deep = TRUE
deep_cloned_microwave_oven <- a_microwave_oven$clone(deep = TRUE)
# Change a_microwave_oven's power plug type
a_microwave_oven$power_plug$type <- c("British")
# Check a_microwave_oven & cloned_microwave_oven same
identical(a_microwave_oven$power_plug$type, cloned_microwave_oven$power_plug$type)
# Check a_microwave_oven & deep_cloned_microwave_oven different
!identical(a_microwave_oven$power_plug$type, deep_cloned_microwave_oven$power_plug$type)
microwave_oven_factory <- R6Class(
"MicrowaveOven",
private = list(
..power_rating_watts = 800,
..power_level_watts = 800,
..door_is_open = FALSE,
..power_plug = NULL
),
public = list(
initialize = function() {
private$..power_plug = power_plug_factory$new()
},
cook = function(time_seconds) {
Sys.sleep(time_seconds)
print("Your food is cooked!")
},
open_door = function() {
private$..door_is_open = TRUE
},
close_door = function() {
private$..door_is_open = FALSE
}
),
active = list(
power_rating_watts = function() {
private$..power_rating_watts
},
power_level_watts = function(value) {
if (missing(value)) {
private$..power_level_watts
} else {
assertive.types::assert_is_a_number(value)
assertive.numbers::assert_all_are_in_closed_range(
value, 0, private$..power_rating_watts
)
private$..power_level_watts <- value
}
},
power_plug = function(value) {
if (missing(value)) {
private$..power_plug
} else {
private$..power_plug <- value
}
}
)
)
# Create a microwave oven
a_microwave_oven <- microwave_oven_factory$new()
# Look at its power plug
a_microwave_oven$power_plug
# Copy a_microwave_oven using clone(), no args
cloned_microwave_oven <- a_microwave_oven$clone()
# Copy a_microwave_oven using clone(), deep = TRUE
deep_cloned_microwave_oven <- a_microwave_oven$clone(deep = TRUE)
# Change a_microwave_oven's power plug type
a_microwave_oven$power_plug$type <- c("British")
# Check a_microwave_oven & cloned_microwave_oven same
identical(a_microwave_oven$power_plug$type, cloned_microwave_oven$power_plug$type)
# Check a_microwave_oven & deep_cloned_microwave_oven different
!identical(a_microwave_oven$power_plug$type, deep_cloned_microwave_oven$power_plug$type)
install.packages("RSQLite")
packrat::snapshot(prompt = FALSE)
download.file("http://s3.amazonaws.com/assets.datacamp.com/production/course_2000/datasets/cooking-times.sqlite",  "cooking-times.sqlite")
# Complete the class definition
smart_microwave_oven_factory <- R6Class(
"SmartMicrowaveOven",
inherit = microwave_oven_factory, # Specify inheritance
private = list(
# Add a field to store connection
conn = NULL
),
public = list(
initialize = function() {
# Connect to the database
private$conn <- dbConnect(SQLite(), "cooking-times.sqlite")
},
get_cooking_time = function(food) {
dbGetQuery(
private$conn,
sprintf("SELECT time_seconds FROM cooking_times WHERE food = '%s'", food)
)
},
finalize = function() {
# Print a message
message("Disconnecting from the cooking times database.")
# Disconnect from the database
dbDisconnect(private$conn)
}
)
)
# Create a smart microwave object
a_smart_microwave <- smart_microwave_oven_factory$new()
# Call the get_cooking_time() method
a_smart_microwave$get_cooking_time("soup")
# Remove the smart microwave
rm(a_smart_microwave)
# Force garbage collection
gc()
library(RSQLite)
# Complete the class definition
smart_microwave_oven_factory <- R6Class(
"SmartMicrowaveOven",
inherit = microwave_oven_factory, # Specify inheritance
private = list(
# Add a field to store connection
conn = NULL
),
public = list(
initialize = function() {
# Connect to the database
private$conn <- dbConnect(SQLite(), "cooking-times.sqlite")
},
get_cooking_time = function(food) {
dbGetQuery(
private$conn,
sprintf("SELECT time_seconds FROM cooking_times WHERE food = '%s'", food)
)
},
finalize = function() {
# Print a message
message("Disconnecting from the cooking times database.")
# Disconnect from the database
dbDisconnect(private$conn)
}
)
)
# Create a smart microwave object
a_smart_microwave <- smart_microwave_oven_factory$new()
# Call the get_cooking_time() method
a_smart_microwave$get_cooking_time("soup")
# Remove the smart microwave
rm(a_smart_microwave)
# Force garbage collection
gc()
# Complete the class definition
smart_microwave_oven_factory <- R6Class(
"SmartMicrowaveOven",
inherit = microwave_oven_factory, # Specify inheritance
private = list(
# Add a field to store connection
conn = NULL
),
public = list(
initialize = function() {
# Connect to the database
private$conn <- dbConnect(SQLite(), "cooking-times.sqlite")
},
get_cooking_time = function(food) {
dbGetQuery(
private$conn,
sprintf("SELECT time_seconds FROM cooking_times WHERE food = '%s'", food)
)
},
finalize = function() {
# Print a message
message("Disconnecting from the cooking times database.")
# Disconnect from the database
dbDisconnect(private$conn)
}
)
)
# Create a smart microwave object
a_smart_microwave <- smart_microwave_oven_factory$new()
# Call the get_cooking_time() method
a_smart_microwave$get_cooking_time("soup")
# Remove the smart microwave
rm(a_smart_microwave)
# Force garbage collection
gc()
a_smart_microwave$get_cooking_time("soup")
a_smart_microwave <- smart_microwave_oven_factory$new()
a_smart_microwave$get_cooking_time("soup")
